TRUNCATE TABLE X_IMDB_BASE_TITLE_AKAS_CHG;

/* DETECT CHANGES */
INSERT INTO X_IMDB_BASE_TITLE_AKAS_CHG (
	TITLE_ID
	,TITLE_NK
	,ORDERING_NK
	,TITLE
	,REGION
	,LANGUAGE
	,TYPES
	,ATTRIBUTES
	,ISORIGINALTITLE
	,SRC_ID
	,LOAD_DATE
	,NOTE
	,CHG_FLG
	)
SELECT DW.TITLE_ID
	,ST.TITLE_NK
	,ST.ORDERING_NK
	,ST.TITLE
	,ST.REGION
	,ST.LANGUAGE
	,ST.TYPES
	,ST.ATTRIBUTES
	,ST.ISORIGINALTITLE
	,ST.SRC_ID
	,ST.LOAD_DATE
	,ST.NOTE
	,CASE
		WHEN DW.TITLE_ID IS NULL
			THEN 'I'
		ELSE 'X'
		END
FROM ST_IMDB_BASE_TITLE_AKAS ST
LEFT OUTER JOIN DW_IMDB_BASE_TITLE_AKAS DW
	ON DW.TITLE_NK = ST.TITLE_NK
		AND DW.ORDERING_NK = ST.ORDERING_NK
WHERE DW.TITLE_ID IS NULL
	OR DW.TITLE <> ST.TITLE
	OR DW.REGION <> ST.REGION
	OR DW.LANGUAGE <> ST.LANGUAGE
	OR DW.TYPES <> ST.TYPES
	OR DW.ATTRIBUTES <> ST.ATTRIBUTES
	OR DW.ISORIGINALTITLE <> ST.ISORIGINALTITLE
	OR DW.SRC_ID <> ST.SRC_ID
	OR DW.NOTE <> ST.NOTE;

ANALYZE X_IMDB_BASE_TITLE_AKAS_CHG;

/* INSERT CHANGES */
INSERT INTO DW_IMDB_BASE_TITLE_AKAS (
	TITLE_ID
	,TITLE_NK
	,ORDERING_NK
	,TITLE
	,REGION
	,LANGUAGE
	,TYPES
	,ATTRIBUTES
	,ISORIGINALTITLE
	,SRC_ID
	,LOAD_DATE
	,LAST_UPDATE
	,NOTE
	)
SELECT M.MAX_ID + ROW_NUMBER() OVER (
		ORDER BY X.TITLE_NK
			,X.ORDERING_NK
		)
	,X.TITLE_NK
	,X.ORDERING_NK
	,X.TITLE
	,X.REGION
	,X.LANGUAGE
	,X.TYPES
	,X.ATTRIBUTES
	,X.ISORIGINALTITLE
	,X.SRC_ID
	,X.LOAD_DATE
	,X.LOAD_DATE
	,X.NOTE
FROM X_IMDB_BASE_TITLE_AKAS_CHG X
	,(
		SELECT MAX(TITLE_ID) MAX_ID
		FROM DW_IMDB_BASE_TITLE_AKAS
		) M
WHERE X.CHG_FLG = 'I';

/* UPDATE CHANGES */
UPDATE DW_IMDB_BASE_TITLE_AKAS
SET TITLE_NK = X.TITLE_NK
	,ORDERING_NK = X.ORDERING_NK
	,TITLE = X.TITLE
	,REGION = X.REGION
	,LANGUAGE = X.LANGUAGE
	,TYPES = X.TYPES
	,ATTRIBUTES = X.ATTRIBUTES
	,ISORIGINALTITLE = X.ISORIGINALTITLE
	,SRC_ID = X.SRC_ID
	,LAST_UPDATE = X.LOAD_DATE
	,NOTE = X.NOTE
FROM X_IMDB_BASE_TITLE_AKAS_CHG X
WHERE X.TITLE_NK = DW_IMDB_BASE_TITLE_AKAS.TITLE_NK
	AND X.ORDERING_NK = DW_IMDB_BASE_TITLE_AKAS.ORDERING_NK
	AND X.CHG_FLG = 'X';

ANALYZE DW_IMDB_BASE_TITLE_AKAS;

/* SAVE CURRENT LOAD LOG */
INSERT INTO X_IMDB_BASE_LOG (
	LOAD_TIMESTAMP
	,LOAD_SEQ_NUM
	,SRC_ID
	,OBJECT_NAME
	,LOAD_DATE
	,ST_ROW_COUNT
	,DW_ROW_COUNT
	,DISTINCT_COUNT
	)
SELECT NOW()
	,20
	,DW.SRC_ID
	,'DW_IMDB_BASE_TITLE_AKAS'
	,DW.LAST_UPDATE AS LOAD_DATE
	,L.ST_ROW_COUNT AS ST_ROW_COUNT
	,COUNT(DW.*) AS DW_ROW_COUNT
	,NULL AS DISTINCT_COUNT
FROM DW_IMDB_BASE_TITLE_AKAS DW
JOIN X_IMDB_BASE_LOG L
	ON DW.SRC_ID = L.SRC_ID
    AND DW.LAST_UPDATE = L.LOAD_DATE
WHERE L.LOAD_SEQ_NUM = 10
	AND L.OBJECT_NAME = 'ST_IMDB_BASE_TITLE_AKAS'
	AND L.LOAD_DATE = (
		SELECT MAX(LOAD_DATE)
		FROM ST_IMDB_BASE_TITLE_AKAS
		)
GROUP BY DW.SRC_ID
	,DW.LAST_UPDATE
	,L.ST_ROW_COUNT;

/* SAVE ETL LOG HISTORY */
INSERT INTO ETL_LOG (
	SUBJECT_AREA
	,LOAD_TIMESTAMP
	,LOAD_SEQ_NUM
	,SRC_ID
	,OBJECT_NAME
	,LOAD_DATE
	,ST_ROW_COUNT
	,DW_ROW_COUNT
	,DISTINCT_COUNT
	,FAIL_CHECK_BOOL_1
	,ERROR_MESSAGE_1
	,FAIL_CHECK_BOOL_2
	,ERROR_MESSAGE_2
	,FAIL_CHECK_BOOL_3
	,ERROR_MESSAGE_3
	)
SELECT 'IMDB_BASE'
	,LOAD_TIMESTAMP
	,LOAD_SEQ_NUM
	,SRC_ID
	,OBJECT_NAME
	,LOAD_DATE
	,ST_ROW_COUNT
	,DW_ROW_COUNT
	,DISTINCT_COUNT
	,CASE
		WHEN SUM(ST_ROW_COUNT) = SUM(DW_ROW_COUNT)
			THEN 0
		ELSE 1
		END
	,CONCAT (
		'ROW COUNTS FOR THE LATEST LATEST TRANSACTION DATE DO NOT MATCH SOURCE. SOURCE ST (ST_IMDB_BASE_TITLE_AKAS) = '
		,ST_ROW_COUNT
		,' DW (DW_IMDB_BASE_TITLE_AKAS) = '
		,DW_ROW_COUNT
		,'.'
		)
	,0
	,'N/A'
	,0
	,'N/A'
FROM X_IMDB_BASE_LOG
WHERE LOAD_SEQ_NUM = 20
GROUP BY LOAD_TIMESTAMP
	,LOAD_SEQ_NUM
	,SRC_ID
	,OBJECT_NAME
	,LOAD_DATE
	,ST_ROW_COUNT
	,DW_ROW_COUNT
	,DISTINCT_COUNT;

COMMIT;
