/* DETECT CHANGES */
TRUNCATE TABLE X_IMDB_BASE_TITLE_AKAS_CHG;

INSERT INTO X_IMDB_BASE_TITLE_AKAS_CHG (
	TITLE_ID
	,TITLE_NK
	,ORDERING_NK
	,TITLE_DESC
	,REGION_DESC
	,LANGUAGE_DESC
	,TYPES_DESC
	,ATTRIBUTES_DESC
	,ISORIGINALTITLE
	,SRC_ID
	,LOAD_DATE
	,NOTE
	,CHG_FLG
	)
SELECT T.TITLE_ID
	,S.ORDERING_NK
	,S.TITLE_DESC
	,S.REGION_DESC
	,S.LANGUAGE_DESC
	,S.TYPES_DESC
	,S.ATTRIBUTES_DESC
	,S.ISORIGINALTITLE
	,S.SRC_ID
	,S.LOAD_DATE
	,S.NOTE
	,CASE
		WHEN T.TITLE_ID IS NULL
			THEN 'I'
		ELSE 'X'
		END
FROM ST_IMDB_BASE_TITLE_AKAS S
LEFT OUTER JOIN DW_IMDB_BASE_TITLE_AKAS T
	ON T.ORDERING_NK = S.ORDERING_NK
		AND T.ORDERING_NK = S.ORDERING_NK
WHERE T.TITLE_ID IS NULL
	OR T.TITLE_DESC <> S.TITLE_DESC
	OR T.REGION_DESC <> S.REGION_DESC
	OR T.LANGUAGE_DESC <> S.LANGUAGE_DESC
	OR T.TYPES_DESC <> S.TYPES_DESC
	OR T.ATTRIBUTES_DESC <> S.ATTRIBUTES_DESC
	OR T.ISORIGINALTITLE <> S.ISORIGINALTITLE
	OR T.SRC_ID <> S.SRC_ID
	OR T.NOTE <> S.NOTE;

ANALYZE X_IMDB_BASE_TITLE_AKAS_CHG;

/* INSERT CHANGES */
INSERT INTO DW_IMDB_BASE_TITLE_AKAS (
	TITLE_ID
	,TITLE_NK
	,ORDERING_NK
	,TITLE_DESC
	,REGION_DESC
	,LANGUAGE_DESC
	,TYPES_DESC
	,ATTRIBUTES_DESC
	,ISORIGINALTITLE
	,SRC_ID
	,LOAD_DATE
	,LAST_UPDATE
	,NOTE
	)
SELECT M.MAX_ID + ROW_NUMBER() OVER (
		ORDER BY S.TITLE_NK
			,S.ORDERING_NK
		)
	,S.TITLE_NK
	,S.ORDERING_NK
	,S.TITLE_DESC
	,S.REGION_DESC
	,S.LANGUAGE_DESC
	,S.TYPES_DESC
	,S.ATTRIBUTES_DESC
	,S.ISORIGINALTITLE
	,S.SRC_ID
	,S.LOAD_DATE
	,S.LOAD_DATE
	,S.NOTE
FROM X_IMDB_BASE_TITLE_AKAS_CHG S
	,(
		SELECT MAX(TITLE_ID) MAX_ID
		FROM DW_IMDB_BASE_TITLE_AKAS
		) M
WHERE S.CHG_FLG = 'I';

/* UPDATE CHANGES */
UPDATE DW_IMDB_BASE_TITLE_AKAS
SET TITLE_NK = S.TITLE_NK
	,ORDERING_NK = S.ORDERING_NK
	,TITLE_DESC = S.TITLE_DESC
	,REGION_DESC = S.REGION_DESC
	,LANGUAGE_DESC = S.LANGUAGE_DESC
	,TYPES_DESC = S.TYPES_DESC
	,ATTRIBUTES_DESC = S.ATTRIBUTES_DESC
	,ISORIGINALTITLE = S.ISORIGINALTITLE
	,SRC_ID = S.SRC_ID
	,LAST_UPDATE = S.LOAD_DATE
	,NOTE = S.NOTE
FROM X_IMDB_BASE_TITLE_AKAS_CHG S
WHERE S.TITLE_NK = DW_IMDB_BASE_TITLE_AKAS.TITLE_NK
	AND S.ORDERING_NK = DW_IMDB_BASE_TITLE_AKAS.ORDERING_NK
	AND S.CHG_FLG = 'X';

ANALYZE DW_IMDB_BASE_TITLE_AKAS;

INSERT INTO X_IMDB_BASE_LOG (
	LOAD_TIMESTAMP
	,LOAD_SEQ_NUM
	,SRC_ID
	,OBJECT_NAME
	,LOAD_DATE
	,ST_ROW_COUNT
	,DW_ROW_COUNT
	,DISTINCT_COUNT
	)
SELECT NOW()
	,30
	,S.SRC_ID
	,'DW_IMDB_BASE_TITLE_AKAS'
	,S.LOAD_DATE AS LOAD_DATE
	,T.ST_ROW_COUNT AS ST_ROW_COUNT
	,COUNT(S.*) AS DW_ROW_COUNT
	,NULL AS DISTINCT_COUNT
FROM DW_IMDB_BASE_TITLE_AKAS S
JOIN X_IMDB_BASE_LOG T
	ON S.SRC_ID = T.SRC_ID
    AND S.LOAD_DATE = T.LOAD_DATE
WHERE T.LOAD_SEQ_NUM = 10
	AND T.OBJECT_NAME = 'ST_IMDB_BASE_TITLE_AKAS'
	AND T.LOAD_DATE = (
		SELECT MAX(LOAD_DATE)
		FROM ST_IMDB_BASE_TITLE_AKAS
		)
GROUP BY S.SRC_ID
	,S.LOAD_DATE
	,T.ST_ROW_COUNT;

/* SAVE LOG HISTORY */
INSERT INTO ETL_LOG (
	SUBJECT_AREA
	,LOAD_TIMESTAMP
	,LOAD_SEQ_NUM
	,SRC_ID
	,OBJECT_NAME
	,LOAD_DATE
	,ST_ROW_COUNT
	,DW_ROW_COUNT
	,DISTINCT_COUNT
	,FAIL_CHECK_BOOL_1
	,ERROR_MESSAGE_1
	,FAIL_CHECK_BOOL_2
	,ERROR_MESSAGE_2
	,FAIL_CHECK_BOOL_3
	,ERROR_MESSAGE_3
	)
SELECT 'IMDB_BASE'
	,LOAD_TIMESTAMP
	,LOAD_SEQ_NUM
	,SRC_ID
	,OBJECT_NAME
	,LOAD_DATE
	,ST_ROW_COUNT
	,DW_ROW_COUNT
	,DISTINCT_COUNT
	,CASE
		WHEN SUM(ST_ROW_COUNT) = SUM(DW_ROW_COUNT)
			THEN 0
		ELSE 1
		END
	,CONCAT (
		'ROW COUNTS FOR THE LATEST LATEST TRANSACTION DATE DO NOT MATCH SOURCE. SOURCE ST (ST_IMDB_BASE_TITLE_AKAS) = '
		,ST_ROW_COUNT
		,' DW (DW_IMDB_BASE_TITLE_AKAS) = '
		,DW_ROW_COUNT
		,'.'
		)
	,0
	,'N/A'
	,0
	,'N/A'
FROM X_IMDB_BASE_LOG
WHERE LOAD_SEQ_NUM = 30
GROUP BY LOAD_TIMESTAMP
	,LOAD_SEQ_NUM
	,SRC_ID
	,OBJECT_NAME
	,LOAD_DATE
	,ST_ROW_COUNT
	,DW_ROW_COUNT
	,DISTINCT_COUNT;

COMMIT;
